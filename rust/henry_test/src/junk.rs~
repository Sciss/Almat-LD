// let x: VecDeque<f64> = vec![0.0, 1.0, 2.0, 3.0];
// let y: Vec<f64> = vec![0.0, 1.0, 2.0, 3.0];
// let x: henry::Flow = henry::Flow::new(vec![0.0, 1.0, 2.0, 3.0]);
// let y: henry::Flow = henry::Flow::new(Vec::<f64>::new());
// let x = &mut henry::Flow::new(2);
// let y = &mut henry::Flow::new(2);

// let d: usize = 2;
// let a: Box<[f64]> = Box::new([0.3, 0.5]);

// println!("array {:#?}", a);

// let x: f64 = 0.1_f64.cos();
// let x = y * x;

// println!("printing flow 1 {:#?}  and 2 {:#?}", x, y);

// println!(
//     "printing first elements flow 1 {:#?}  and 2 {:#?}",
//     x[0], y[0]
// );

// x[0] = 1.1_f64;
// y[0] = 1.2_f64;
// y[1] = 3.4_f64;

// println!(
//     "printing first elements flow 1 {:#?}  and 2 {:#?}",
//     x[0], y[0]
// );

// let x = x + y;

// println!("printing flow 1 {:#?}  and 2 {:#?}", &x, &y);

// let x = x + y;

// println!("again printing flow 1 {:#?}  and 2 {:#?}", &x, &y);

// let x = henry::Point { x: 2, y: 3 };
// let y = henry::Point { x: 1, y: 0 };

// println!("again printing point 1 {:#?}  and 2 {:#?}", x, y);

// let x = x + y;

// println!("again printing point 1 {:#?}  and 2 {:#?}", x, y);

// let mut x = henry::State::new(2);
// let mut y = henry::State::new(2);

// x[0] = 1.2;
// x[1] = 3.4;
// y[0] = 5.6;
// y[1] = 7.8;

// println!("printing state 1 {:#?}  and 2 {:#?}", x, y);

// let x = x + y;

// println!("printing state 1 {:#?}  and 2 {:#?}", x, y);

// let c: &Fn(f64) -> f64 = &|x: f64| -> f64 { x * 2.0_f64 };

// let mut p = vec![c];

// println!("calling p[0] {:#?}", p[0](4.1_f64));

// let c = &|x: f64| -> f64 { x * 2.1_f64 };

// p.push(c);

// println!("calling p[0] {:#?}, {:#?}", p[0](4.1_f64), p[1](4.1_f64));
